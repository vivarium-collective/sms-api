[project]
name = "sms_api"
version = "0.2.37-dev"
description = "This is the api server for Vivarium simulation services."
authors = [{ name = "Alex Patrie", email = "alexanderpatrie@gmail.com" }, { name = "Jim Schaff", email = "jschaff@gmail.com" }]
requires-python = "==3.12.9"
readme = "README.md"
dependencies = [
    "aioboto3>=15.4.0",
    "aiofiles>=24.1.0",
    "aiosqlite>=0.21.0",
    "altair>=5.5.0",
    "anywidget>=0.9.18",
    "async-lru>=2.0.5",
    "asyncssh>=2.21.1",
    "dotenv>=0.9.9",
    "duckdb>=1.4.1",
    "fastapi>=0.120.1",
    "gcloud-aio-storage>=9.6.0",
    "httpx>=0.28.1",
    "ijson>=3.4.0.post0",
    "marimo>=0.17.2",
    "nats-py>=2.11.0",
    "nbformat>=5.10.4",
    "numpy>=2.3.4",
    "orjson>=3.11.4",
    "pandas-stubs>=2.3.2.250926",
    "pandas[performance]>=2.3.3",
    "polars>=1.34.0",
    "polars-lts-cpu[pyarrow]>=1.33.1",
    "pydantic>=2.12.3",
    "pydantic-settings>=2.11.0",
    "pymongo>=4.15.3",
    "python-dateutil>=2.9.0.post0",
    "python-multipart>=0.0.20",
    "pyyaml>=6.0.3",
    "ruff>=0.14.2",
    "seaborn>=0.13.2",
    "sqlalchemy[asyncio]>=2.0.44",
    "sqlglot>=27.28.1",
    "tqdm>=4.67.1",
    "types-aioboto3[s3]>=15.4.0",
    "typing-extensions>=4.15.0",
    "uvicorn>=0.38.0",
    "vecoli>=0.0.2",
    "vegafusion>=2.0.3",
    "vl-convert-python>=1.8.0",
    "xmltodict>=1.0.2",
]

[dependency-groups]
dev = [
    "debugpy>=1.8.17",
    "deptry>=0.23.1",
    "ipdb>=0.13.13",
    "mypy>=1.18.2",
    "openapi-python-client>=0.27.0",
    "pre-commit>=4.3.0",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "testcontainers[nats]>=4.13.2",
    "tox>=4.32.0",
    "types-aiofiles>=25.1.0.20251011",
    "types-pyyaml>=6.0.12.20250915",
    "types-requests>=2.32.4.20250913",
    "types-tqdm>=4.67.0.20250809",
    "types-xmltodict>=1.0.1.20250920",
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.22",
    "mkdocstrings[python]>=0.30.1",
    "sphinx>=8.2.3",
    "sphinx-autodoc-typehints>=3.5.2",
    "sphinx-rtd-theme>=3.0.2",
]

[tool.uv]
default-groups = [
    "dev",
    "docs",
]

[tool.hatch.build.targets.sdist]
include = [
    "sms_api",
    "tests",
    "app",
]

[tool.hatch.build.targets.wheel]
include = [
    "sms_api",
    "tests",
    "app",
]

[project.urls]
Repository = "https://github.com/vivarium-collective/sms-api"
Documentation = "https://vivarium-collective.github.io/sms-api/"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.mypy]
files = ["sms_api", "tests", "app"]
strict = true
exclude = ["sms_api/data/simulation_data_service.py", '^sms_api/api/client/.*', '^app/ui/.*', '^home/*', "^scratchpads/*", "^simulation_configs/*", "^app/test_data_explorer.py"]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "--cov-report=html"

[tool.deptry]
exclude = [".venv/*", "home/*", "simulation_configs/*", "app/ui/data_explorer.py"]
ignore = ["DEP002", "DEP003", "DEP004"]

[tool.ruff]
target-version = "py39"
line-length = 120
fix = true

[tool.ruff.lint]
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    # "DEP001",
#    # A001 Variable `sum` is shadowing a Python builtin
     "A001",
     "A002",
#    # B008 Do not perform function call `Body` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
#    "B008",
#    # B026 Star-arg unpacking after a keyword argument is strongly discouraged
#    "B026",
    # B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    "B904",
#    # C414 Unnecessary `list` call within `tuple()`
#    "C414",
#    # C416 Unnecessary `list` comprehension (rewrite using `list()`)
#    # "C416",
#    # C417 Unnecessary `map` usage (rewrite using a `list` comprehension)
#    "C417",
#    # C419 Unnecessary list comprehension
    "C419",
#    # E501 Line too long (131 > 120)
#    "E501",
#    # E722 Do not use bare `except`
#    "E722",
#    # E731 Do not assign a `lambda` expression, use a `def`
#    "E731",
#    # F841 Local variable `keys` is assigned to but never used
#    "F841",
#    # PGH003 Use specific rule codes when ignoring type issues
#    "PGH003",
#    # RUF009 Do not perform function call `Field` in dataclass defaults
#    "RUF009",
    # RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
    "RUF012",
#    # RUF013 PEP 484 prohibits implicit `Optional
#    "RUF013",
#    # S101 Use of `assert` detected
#    "S101",
#    # *** S113 Probable use of `requests` call without timeout
#    "S113",
#    # S301 `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
#    "S301",
#    # S307 Use of possibly insecure function
#    "S307",
#    # S603 `subprocess` call: check for execution of untrusted input
#    "S603",
#    # S608 Possible SQL injection vector through string-based query construction
#    "S608",
#    # SIM101 Multiple `isinstance` calls for expression, merge into a single call
#    "SIM101",
#    # SIM105 Use `contextlib.suppress(KeyError)` instead of `try`-`except`-`pass`
#    "SIM105",
#    # SIM108 Use ternary operator `source = self.model_source.value if isinstance(self.model_source, ModelFilepath) else self.model_source` instead of `if`-`else`-block
#    "SIM108",
#    # SIM118 Use `key not in dict` instead of `key not in dict.keys()`
#    "SIM118",
    # TRY002 Create your own exception
    "TRY002",
    # TRY003 Avoid specifying long messages outside the exception class
    "TRY003",
#    # TRY004 Prefer `TypeError` exception for invalid type
#    "TRY004",
    # TRY201 Use `raise` without specifying exception name
    "TRY201",
    # TRY300 Consider moving this statement to an `else` block
    "TRY300",
#    # TRY400 Use `logging.exception` instead of `logging.error`
#    "TRY400",
    # UP006 Use `dict` instead of `Dict` for type annotation
    "UP006",
#    # UP035 `typing.Dict` is deprecated, use `dict` instead
#    "UP035",
]
exclude = ["sms_api/data/simulation_data_service.py", ".venv/*", "app/ui/*", "sms_api/api/client/*", "documentation/*", "home/*", "scratchpads/*", "simulation_configs/*"]

[tool.ruff.format]
preview = true

[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["sms_api", "client"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]
