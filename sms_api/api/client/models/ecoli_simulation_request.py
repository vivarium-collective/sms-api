"""
sms-api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.2.2
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt
from typing_extensions import Self

from sms_api.api.client.models.simulator_version import SimulatorVersion
from sms_api.api.client.models.variant_config_value_value import VariantConfigValueValue


class EcoliSimulationRequest(BaseModel):
    """
    EcoliSimulationRequest
    """

    simulator: SimulatorVersion
    parca_dataset_id: StrictInt
    variant_config: Dict[str, Dict[str, VariantConfigValueValue]]
    total_time: Optional[Union[StrictFloat, StrictInt]] = 11
    __properties: ClassVar[List[str]] = ["simulator", "parca_dataset_id", "variant_config", "total_time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EcoliSimulationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of simulator
        if self.simulator:
            _dict["simulator"] = self.simulator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in variant_config (dict)
        _field_dict = {}
        if self.variant_config:
            for _key_variant_config in self.variant_config:
                if self.variant_config[_key_variant_config]:
                    _field_dict[_key_variant_config] = self.variant_config[_key_variant_config].to_dict()
            _dict["variant_config"] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EcoliSimulationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "simulator": SimulatorVersion.from_dict(obj["simulator"]) if obj.get("simulator") is not None else None,
            "parca_dataset_id": obj.get("parca_dataset_id"),
            "variant_config": dict(
                (
                    _k,
                    dict((_ik, VariantConfigValueValue.from_dict(_iv)) for _ik, _iv in _v.items())
                    if _v is not None
                    else None,
                )
                for _k, _v in obj.get("variant_config").items()
            )
            if obj.get("variant_config") is not None
            else None,
            "total_time": obj.get("total_time") if obj.get("total_time") is not None else 11,
        })
        return _obj
