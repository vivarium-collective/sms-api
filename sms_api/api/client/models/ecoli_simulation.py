"""
sms-api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.2.2
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, StrictInt
from typing_extensions import Self

from sms_api.api.client.models.ecoli_simulation_request import EcoliSimulationRequest
from sms_api.api.client.models.hpc_run import HpcRun


class EcoliSimulation(BaseModel):
    """
    EcoliSimulation
    """

    database_id: StrictInt
    sim_request: EcoliSimulationRequest
    hpc_run: Optional[HpcRun] = None
    __properties: ClassVar[List[str]] = ["database_id", "sim_request", "hpc_run"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EcoliSimulation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sim_request
        if self.sim_request:
            _dict["sim_request"] = self.sim_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hpc_run
        if self.hpc_run:
            _dict["hpc_run"] = self.hpc_run.to_dict()
        # set to None if hpc_run (nullable) is None
        # and model_fields_set contains the field
        if self.hpc_run is None and "hpc_run" in self.model_fields_set:
            _dict["hpc_run"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EcoliSimulation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "database_id": obj.get("database_id"),
            "sim_request": EcoliSimulationRequest.from_dict(obj["sim_request"])
            if obj.get("sim_request") is not None
            else None,
            "hpc_run": HpcRun.from_dict(obj["hpc_run"]) if obj.get("hpc_run") is not None else None,
        })
        return _obj
