"""
sms-api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.2.2
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr, field_validator
from typing_extensions import Self


class Settings(BaseModel):
    """
    Settings
    """

    storage_bucket: Optional[StrictStr] = "files.biosimulations.dev"
    storage_endpoint_url: Optional[StrictStr] = "https://storage.googleapis.com"
    storage_region: Optional[StrictStr] = "us-east4"
    storage_tensorstore_driver: Optional[StrictStr] = "zarr3"
    storage_tensorstore_kvstore_driver: Optional[StrictStr] = "gcs"
    temporal_service_url: Optional[StrictStr] = "localhost:7233"
    storage_local_cache_dir: Optional[StrictStr] = "./local_cache"
    storage_gcs_credentials_file: Optional[StrictStr] = ""
    mongodb_uri: Optional[StrictStr] = "mongodb://localhost:27017"
    mongodb_database: Optional[StrictStr] = "biosimulations"
    mongodb_collection_omex: Optional[StrictStr] = "BiosimOmex"
    mongodb_collection_sims: Optional[StrictStr] = "BiosimSims"
    mongodb_collection_compare: Optional[StrictStr] = "BiosimCompare"
    postgres_user: Optional[StrictStr] = "<USER>"
    postgres_password: Optional[StrictStr] = "<PASSWORD>"
    postgres_database: Optional[StrictStr] = "sms"
    postgres_host: Optional[StrictStr] = "localhost"
    postgres_port: Optional[StrictInt] = 5432
    postgres_pool_size: Optional[StrictInt] = 10
    postgres_max_overflow: Optional[StrictInt] = 5
    postgres_pool_timeout: Optional[StrictInt] = 30
    postgres_pool_recycle: Optional[StrictInt] = 1800
    slurm_submit_host: Optional[StrictStr] = ""
    slurm_submit_user: Optional[StrictStr] = ""
    slurm_submit_key_path: Optional[StrictStr] = ""
    slurm_partition: Optional[StrictStr] = ""
    slurm_node_list: Optional[StrictStr] = ""
    slurm_qos: Optional[StrictStr] = ""
    slurm_log_base_path: Optional[StrictStr] = ""
    hpc_image_base_path: Optional[StrictStr] = ""
    hpc_parca_base_path: Optional[StrictStr] = ""
    hpc_repo_base_path: Optional[StrictStr] = ""
    hpc_sim_base_path: Optional[StrictStr] = ""
    __properties: ClassVar[List[str]] = [
        "storage_bucket",
        "storage_endpoint_url",
        "storage_region",
        "storage_tensorstore_driver",
        "storage_tensorstore_kvstore_driver",
        "temporal_service_url",
        "storage_local_cache_dir",
        "storage_gcs_credentials_file",
        "mongodb_uri",
        "mongodb_database",
        "mongodb_collection_omex",
        "mongodb_collection_sims",
        "mongodb_collection_compare",
        "postgres_user",
        "postgres_password",
        "postgres_database",
        "postgres_host",
        "postgres_port",
        "postgres_pool_size",
        "postgres_max_overflow",
        "postgres_pool_timeout",
        "postgres_pool_recycle",
        "slurm_submit_host",
        "slurm_submit_user",
        "slurm_submit_key_path",
        "slurm_partition",
        "slurm_node_list",
        "slurm_qos",
        "slurm_log_base_path",
        "hpc_image_base_path",
        "hpc_parca_base_path",
        "hpc_repo_base_path",
        "hpc_sim_base_path",
    ]

    @field_validator("storage_tensorstore_driver")
    def storage_tensorstore_driver_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["zarr", "n5", "zarr3"]):
            raise ValueError("must be one of enum values ('zarr', 'n5', 'zarr3')")
        return value

    @field_validator("storage_tensorstore_kvstore_driver")
    def storage_tensorstore_kvstore_driver_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["file", "s3", "gcs"]):
            raise ValueError("must be one of enum values ('file', 's3', 'gcs')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Settings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Settings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "storage_bucket": obj.get("storage_bucket")
            if obj.get("storage_bucket") is not None
            else "files.biosimulations.dev",
            "storage_endpoint_url": obj.get("storage_endpoint_url")
            if obj.get("storage_endpoint_url") is not None
            else "https://storage.googleapis.com",
            "storage_region": obj.get("storage_region") if obj.get("storage_region") is not None else "us-east4",
            "storage_tensorstore_driver": obj.get("storage_tensorstore_driver")
            if obj.get("storage_tensorstore_driver") is not None
            else "zarr3",
            "storage_tensorstore_kvstore_driver": obj.get("storage_tensorstore_kvstore_driver")
            if obj.get("storage_tensorstore_kvstore_driver") is not None
            else "gcs",
            "temporal_service_url": obj.get("temporal_service_url")
            if obj.get("temporal_service_url") is not None
            else "localhost:7233",
            "storage_local_cache_dir": obj.get("storage_local_cache_dir")
            if obj.get("storage_local_cache_dir") is not None
            else "./local_cache",
            "storage_gcs_credentials_file": obj.get("storage_gcs_credentials_file")
            if obj.get("storage_gcs_credentials_file") is not None
            else "",
            "mongodb_uri": obj.get("mongodb_uri")
            if obj.get("mongodb_uri") is not None
            else "mongodb://localhost:27017",
            "mongodb_database": obj.get("mongodb_database")
            if obj.get("mongodb_database") is not None
            else "biosimulations",
            "mongodb_collection_omex": obj.get("mongodb_collection_omex")
            if obj.get("mongodb_collection_omex") is not None
            else "BiosimOmex",
            "mongodb_collection_sims": obj.get("mongodb_collection_sims")
            if obj.get("mongodb_collection_sims") is not None
            else "BiosimSims",
            "mongodb_collection_compare": obj.get("mongodb_collection_compare")
            if obj.get("mongodb_collection_compare") is not None
            else "BiosimCompare",
            "postgres_user": obj.get("postgres_user") if obj.get("postgres_user") is not None else "<USER>",
            "postgres_password": obj.get("postgres_password")
            if obj.get("postgres_password") is not None
            else "<PASSWORD>",
            "postgres_database": obj.get("postgres_database") if obj.get("postgres_database") is not None else "sms",
            "postgres_host": obj.get("postgres_host") if obj.get("postgres_host") is not None else "localhost",
            "postgres_port": obj.get("postgres_port") if obj.get("postgres_port") is not None else 5432,
            "postgres_pool_size": obj.get("postgres_pool_size") if obj.get("postgres_pool_size") is not None else 10,
            "postgres_max_overflow": obj.get("postgres_max_overflow")
            if obj.get("postgres_max_overflow") is not None
            else 5,
            "postgres_pool_timeout": obj.get("postgres_pool_timeout")
            if obj.get("postgres_pool_timeout") is not None
            else 30,
            "postgres_pool_recycle": obj.get("postgres_pool_recycle")
            if obj.get("postgres_pool_recycle") is not None
            else 1800,
            "slurm_submit_host": obj.get("slurm_submit_host") if obj.get("slurm_submit_host") is not None else "",
            "slurm_submit_user": obj.get("slurm_submit_user") if obj.get("slurm_submit_user") is not None else "",
            "slurm_submit_key_path": obj.get("slurm_submit_key_path")
            if obj.get("slurm_submit_key_path") is not None
            else "",
            "slurm_partition": obj.get("slurm_partition") if obj.get("slurm_partition") is not None else "",
            "slurm_node_list": obj.get("slurm_node_list") if obj.get("slurm_node_list") is not None else "",
            "slurm_qos": obj.get("slurm_qos") if obj.get("slurm_qos") is not None else "",
            "slurm_log_base_path": obj.get("slurm_log_base_path") if obj.get("slurm_log_base_path") is not None else "",
            "hpc_image_base_path": obj.get("hpc_image_base_path") if obj.get("hpc_image_base_path") is not None else "",
            "hpc_parca_base_path": obj.get("hpc_parca_base_path") if obj.get("hpc_parca_base_path") is not None else "",
            "hpc_repo_base_path": obj.get("hpc_repo_base_path") if obj.get("hpc_repo_base_path") is not None else "",
            "hpc_sim_base_path": obj.get("hpc_sim_base_path") if obj.get("hpc_sim_base_path") is not None else "",
        })
        return _obj
