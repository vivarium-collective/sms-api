# coding: utf-8

"""
    sms-api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.2.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sms_api.api.client.models.parca_dataset_request import ParcaDatasetRequest
from typing import Optional, Set
from typing_extensions import Self

class ParcaDataset(BaseModel):
    """
    ParcaDataset
    """ # noqa: E501
    database_id: StrictInt
    parca_dataset_request: ParcaDatasetRequest
    remote_archive_path: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["database_id", "parca_dataset_request", "remote_archive_path"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ParcaDataset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parca_dataset_request
        if self.parca_dataset_request:
            _dict['parca_dataset_request'] = self.parca_dataset_request.to_dict()
        # set to None if remote_archive_path (nullable) is None
        # and model_fields_set contains the field
        if self.remote_archive_path is None and "remote_archive_path" in self.model_fields_set:
            _dict['remote_archive_path'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ParcaDataset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "database_id": obj.get("database_id"),
            "parca_dataset_request": ParcaDatasetRequest.from_dict(obj["parca_dataset_request"]) if obj.get("parca_dataset_request") is not None else None,
            "remote_archive_path": obj.get("remote_archive_path")
        })
        return _obj
