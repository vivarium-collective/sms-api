"""
[x] base sim (cached)
- antibiotic
- biomanufacturing
- batch variant endpoint
- design specific endpoints.
- downsampling ...
- biocyc id
- api to download the data
- marimo instead of Jupyter notebooks....(auth). ... also on gov cloud.
- endpoint to send sql like queries to parquet files back to client

[x] (/simulation/analysis/download)[exp_id, analysis_id, start, stop, n_windows(cols in tsv)] <- downloads any whose
     generation was configured by <CONFIG>.json

[ ] (/simulation/results/download)[exp_id, observables, n_timesteps] <- downloads parquet files (if any)
    generated by the ParquetEmitter during simulation

[ ] (/simulation/state/download)[exp_id, observables, n_timesteps] <- downloads any .json files whose generation
    was configured by enabling the "save" option in simulation (save times)

[ ] (/simulation/state)[exp_id, observables, n_timesteps] <- get serialized JSON of any .json files whose generation
    was configured by enabling the "save" option in simulation (save times)

***We should implement the /download... endpoint for each router as
    this is a way to easily configure filepaths as they pertain to
    hive partitioning: single simulations will always have the same hive partitioning, etc.
"""

import logging

from fastapi import APIRouter

from sms_api.common.gateway.models import RouterConfig, ServerMode
from sms_api.simulation.hpc_utils import read_latest_commit

logger = logging.getLogger(__name__)

LATEST_COMMIT = read_latest_commit()


def get_server_url(dev: bool = True) -> ServerMode:
    return ServerMode.DEV if dev else ServerMode.PROD


# -- app components -- #

# TODO: mount nfs driver


config = RouterConfig(router=APIRouter(), prefix="/variants", dependencies=[])
