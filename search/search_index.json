{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"sms-api","text":"<p>This is the api server for Vivarium simulation services.</p>"},{"location":"modules/","title":"Services","text":"<p>The <code>DatabaseService</code> is the persistence layer for the simulation service. It provides methods to interact with the database, such as saving and retrieving simulation data.</p> <p>               Bases: <code>ABC</code></p> Source code in <code>sms_api/simulation/database_service.py</code> <pre><code>class DatabaseService(ABC):\n    @abstractmethod\n    async def insert_worker_event(self, worker_event: WorkerEvent, hpcrun_id: int) -&gt; WorkerEvent:\n        pass\n\n    @abstractmethod\n    async def list_worker_events(self, hpcrun_id: int, prev_sequence_number: int | None = None) -&gt; list[WorkerEvent]:\n        pass\n\n    @abstractmethod\n    async def insert_simulator(self, git_commit_hash: str, git_repo_url: str, git_branch: str) -&gt; SimulatorVersion:\n        pass\n\n    @abstractmethod\n    async def get_simulator(self, simulator_id: int) -&gt; SimulatorVersion | None:\n        pass\n\n    @abstractmethod\n    async def get_simulator_by_commit(self, commit_hash: str) -&gt; SimulatorVersion | None:\n        pass\n\n    @abstractmethod\n    async def delete_simulator(self, simulator_id: int) -&gt; None:\n        pass\n\n    @abstractmethod\n    async def list_simulators(self) -&gt; list[SimulatorVersion]:\n        pass\n\n    @abstractmethod\n    async def insert_hpcrun(self, slurmjobid: int, job_type: JobType, ref_id: int, correlation_id: str) -&gt; HpcRun:\n        \"\"\"\n        :param slurmjobid: (`int`) slurm job id for the associated `job_type`.\n        :param job_type: (`JobType`) job type to be run. Choose one of the following:\n            `JobType.SIMULATION`(/vecoli/run), `JobType.PARCA`(/vecoli/parca), `JobType.BUILD_IMAGE`(/simulator/new)\n        :param ref_id: primary key of the object this HPC run is associated with (sim, parca, etc.).\n        \"\"\"\n        pass\n\n    @abstractmethod\n    async def get_hpcrun_by_ref(self, ref_id: int, job_type: JobType) -&gt; HpcRun | None:\n        pass\n\n    @abstractmethod\n    async def get_hpcrun_by_slurmjobid(self, slurmjobid: int) -&gt; HpcRun | None:\n        pass\n\n    @abstractmethod\n    async def get_hpcrun(self, hpcrun_id: int) -&gt; HpcRun | None:\n        pass\n\n    @abstractmethod\n    async def get_hpcrun_id_by_correlation_id(self, correlation_id: str) -&gt; int | None:\n        pass\n\n    @abstractmethod\n    async def delete_hpcrun(self, hpcrun_id: int) -&gt; None:\n        pass\n\n    @abstractmethod\n    async def insert_parca_dataset(self, parca_dataset_request: ParcaDatasetRequest) -&gt; ParcaDataset:\n        pass\n\n    @abstractmethod\n    async def get_parca_dataset(self, parca_dataset_id: int) -&gt; ParcaDataset | None:\n        pass\n\n    @abstractmethod\n    async def delete_parca_dataset(self, parca_dataset_id: int) -&gt; None:\n        pass\n\n    @abstractmethod\n    async def list_parca_datasets(self) -&gt; list[ParcaDataset]:\n        pass\n\n    @abstractmethod\n    async def insert_simulation(self, sim_request: EcoliSimulationRequest) -&gt; EcoliSimulation:\n        pass\n\n    @abstractmethod\n    async def get_simulation(self, simulation_id: int) -&gt; EcoliSimulation | None:\n        pass\n\n    @abstractmethod\n    async def delete_simulation(self, simulation_id: int) -&gt; None:\n        pass\n\n    @abstractmethod\n    async def list_simulations(self) -&gt; list[EcoliSimulation]:\n        pass\n\n    @abstractmethod\n    async def list_running_hpcruns(self) -&gt; list[HpcRun]:\n        \"\"\"Return all HpcRun jobs with status RUNNING.\"\"\"\n        pass\n\n    @abstractmethod\n    async def update_hpcrun_status(self, hpcrun_id: int, new_slurm_job: SlurmJob) -&gt; None:\n        \"\"\"Update the status of a given HpcRun job.\"\"\"\n        pass\n\n    @abstractmethod\n    async def close(self) -&gt; None:\n        pass\n</code></pre> <p>The <code>SimulationService</code> is the core service that handles the simulation logic. It interacts with the database service to save and retrieve simulation data, and it manages the execution of simulations on high-performance computing (HPC) resources.</p> <p>               Bases: <code>ABC</code></p> Source code in <code>sms_api/simulation/simulation_service.py</code> <pre><code>class SimulationService(ABC):\n    @abstractmethod\n    async def get_latest_commit_hash(\n        self,\n        ssh_service: SSHService | None = None,\n        git_repo_url: str = \"https://github.com/CovertLab/vEcoli\",\n        git_branch: str = \"master\",\n    ) -&gt; str:\n        pass\n\n    @abstractmethod\n    async def submit_build_image_job(self, simulator_version: SimulatorVersion) -&gt; int:\n        pass\n\n    @abstractmethod\n    async def submit_parca_job(self, parca_dataset: ParcaDataset) -&gt; int:\n        pass\n\n    @abstractmethod\n    async def submit_ecoli_simulation_job(\n        self, ecoli_simulation: EcoliSimulation, database_service: DatabaseService, correlation_id: str\n    ) -&gt; int:\n        pass\n\n    @abstractmethod\n    async def get_slurm_job_status(self, slurmjobid: int) -&gt; SlurmJob | None:\n        pass\n\n    @abstractmethod\n    async def clone_repository_if_needed(\n        self,\n        git_commit_hash: str,  # first 7 characters of the commit hash are used for the directory name\n        git_repo_url: str = \"https://github.com/vivarium-collective/vEcoli\",\n        git_branch: str = \"messages\",\n    ) -&gt; None:\n        \"\"\"\n        Clone a git repository to a remote directory and return the path to the cloned repository.\n        :param git_commit_hash: The commit hash to checkout after cloning.\n        :param repo_url: The URL of the git repository to clone.\n        :param branch: The branch to clone.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    async def close(self) -&gt; None:\n        pass\n</code></pre>"},{"location":"modules/#sms_api.simulation.database_service.DatabaseService.insert_hpcrun","title":"<code>insert_hpcrun(slurmjobid, job_type, ref_id, correlation_id)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>:param slurmjobid: (<code>int</code>) slurm job id for the associated <code>job_type</code>. :param job_type: (<code>JobType</code>) job type to be run. Choose one of the following:     <code>JobType.SIMULATION</code>(/vecoli/run), <code>JobType.PARCA</code>(/vecoli/parca), <code>JobType.BUILD_IMAGE</code>(/simulator/new) :param ref_id: primary key of the object this HPC run is associated with (sim, parca, etc.).</p> Source code in <code>sms_api/simulation/database_service.py</code> <pre><code>@abstractmethod\nasync def insert_hpcrun(self, slurmjobid: int, job_type: JobType, ref_id: int, correlation_id: str) -&gt; HpcRun:\n    \"\"\"\n    :param slurmjobid: (`int`) slurm job id for the associated `job_type`.\n    :param job_type: (`JobType`) job type to be run. Choose one of the following:\n        `JobType.SIMULATION`(/vecoli/run), `JobType.PARCA`(/vecoli/parca), `JobType.BUILD_IMAGE`(/simulator/new)\n    :param ref_id: primary key of the object this HPC run is associated with (sim, parca, etc.).\n    \"\"\"\n    pass\n</code></pre>"},{"location":"modules/#sms_api.simulation.database_service.DatabaseService.list_running_hpcruns","title":"<code>list_running_hpcruns()</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Return all HpcRun jobs with status RUNNING.</p> Source code in <code>sms_api/simulation/database_service.py</code> <pre><code>@abstractmethod\nasync def list_running_hpcruns(self) -&gt; list[HpcRun]:\n    \"\"\"Return all HpcRun jobs with status RUNNING.\"\"\"\n    pass\n</code></pre>"},{"location":"modules/#sms_api.simulation.database_service.DatabaseService.update_hpcrun_status","title":"<code>update_hpcrun_status(hpcrun_id, new_slurm_job)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Update the status of a given HpcRun job.</p> Source code in <code>sms_api/simulation/database_service.py</code> <pre><code>@abstractmethod\nasync def update_hpcrun_status(self, hpcrun_id: int, new_slurm_job: SlurmJob) -&gt; None:\n    \"\"\"Update the status of a given HpcRun job.\"\"\"\n    pass\n</code></pre>"},{"location":"modules/#sms_api.simulation.simulation_service.SimulationService.clone_repository_if_needed","title":"<code>clone_repository_if_needed(git_commit_hash, git_repo_url='https://github.com/vivarium-collective/vEcoli', git_branch='messages')</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Clone a git repository to a remote directory and return the path to the cloned repository. :param git_commit_hash: The commit hash to checkout after cloning. :param repo_url: The URL of the git repository to clone. :param branch: The branch to clone.</p> Source code in <code>sms_api/simulation/simulation_service.py</code> <pre><code>@abstractmethod\nasync def clone_repository_if_needed(\n    self,\n    git_commit_hash: str,  # first 7 characters of the commit hash are used for the directory name\n    git_repo_url: str = \"https://github.com/vivarium-collective/vEcoli\",\n    git_branch: str = \"messages\",\n) -&gt; None:\n    \"\"\"\n    Clone a git repository to a remote directory and return the path to the cloned repository.\n    :param git_commit_hash: The commit hash to checkout after cloning.\n    :param repo_url: The URL of the git repository to clone.\n    :param branch: The branch to clone.\n    \"\"\"\n    pass\n</code></pre>"}]}